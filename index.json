[{"content":"你是否曾为 Nginx 或 Apache 的复杂配置而头疼？是否曾为了配置一个 SSL 证书、处理 HTTPS 跳转而耗费数小时？如果你对这些问题感同身受，那么是时候了解一下 Caddy 了——一个为现代互联网而生的 Web 服务器。\nCaddy 是一个用 Go 语言编写的开源 Web 服务器，它的设计哲学与传统服务器截然不同：默认安全、配置简单、自动高效。它不仅仅是一个工具，更是一种全新的运维体验。\n为何选择 Caddy？核心优势一览 在众多 Web 服务器中，Caddy 凭借其独特的优势脱颖而出，尤其适合开发者、运维人员和技术爱好者。\n全自动 HTTPS (Automatic HTTPS) 这是 Caddy 最具革命性的功能。你无需了解 Certbot、acme.sh 或手动申请证书的任何繁琐流程。只要在 Caddyfile 中提供一个域名，Caddy 就会： 自动从 Let\u0026rsquo;s Encrypt 或 ZeroSSL 申请 SSL 证书。 自动续签证书，让你一劳永逸。 自动将所有 HTTP 请求重定向到 HTTPS。 这一切都是开箱即用的，无需任何额外配置。 极致简洁的 Caddyfile 配置 告别 Nginx 中层层嵌套、语法复杂的 .conf 文件。Caddy 的配置文件（Caddyfile）设计得极其人性化，易于读写。一个常见的 PHP 网站配置，在 Nginx 中可能需要几十行，而在 Caddy 中可能只需要几行。 默认即安全 (Secure by Default) Caddy 遵循“明智的默认值 (Sane Defaults)”原则。它默认启用最新的 TLS 1.3 协议，使用安全的加密套件，自动启用 HSTS 策略，并默认阻止对 .git 等隐藏文件的访问。你无需成为安全专家，就能获得一个高安全性的站点。 原生支持 HTTP/3 Caddy 原生支持最新的 HTTP/3 协议（基于 QUIC），可以显著减少延迟，提升移动网络和不稳定网络下的访问速度。 Go 语言编写，单文件部署 Caddy 是一个编译好的、无任何依赖的二进制文件。部署它就像复制一个文件一样简单，非常适合 Docker、Kubernetes 等容器化环境。 通用且功能丰富的 Caddyfile 模板 为了让您快速上手，我准备了一份功能丰富的 Caddyfile 配置模板。它几乎涵盖了个人博客、企业官网、API 服务等场景所需的大部分功能，包括：安全头、性能优化、反向代理、日志轮转等。\n您可以将此作为您项目的起点，按需修改。\n`# \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\n通用且功能丰富的 Caddyfile 模板 最后更新: 2025-06-25 \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; 全局配置块 (Global Options Block) { # 默认的日志格式 log { format console level INFO }\n# 开启 OCSP Stapling 缓存，提升 TLS 握手性能 ocsp_stapling }\n\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; 站点一: yourdomain.com (主站点/静态网站/PHP网站) \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; yourdomain.com, www.yourdomain.com {\n# --- 基础配置 --- # 网站根目录 root * /srv/www.yourdomain.com/public # 自动将 www.yourdomain.com 重定向到 yourdomain.com @www host www.yourdomain.com redir @www https://yourdomain.com{uri} # --- 性能优化 --- # 启用 Gzip 和 Zstd 压缩 encode zstd gzip # 浏览器缓存控制 (Cache-Control) @multimedia path *.jpg *.jpeg *.png *.gif *.svg *.webp *.mp4 header @multimedia Cache-Control \u0026quot;public, max-age=2592000, immutable\u0026quot; @static path *.css *.js header @static Cache-Control \u0026quot;public, max-age=604800\u0026quot; # --- PHP-FPM 配置 (如果是 PHP 网站，取消此行注释) --- # php_fastcgi unix//run/php/php8.3-fpm.sock # --- 文件服务 --- file_server { hide .env .git .user.ini } # --- 安全增强 --- header { Strict-Transport-Security \u0026quot;max-age=31536000; includeSubDomains; preload\u0026quot; X-Frame-Options \u0026quot;SAMEORIGIN\u0026quot; X-XSS-Protection \u0026quot;1; mode=block\u0026quot; X-Content-Type-Options \u0026quot;nosniff\u0026quot; # Content-Security-Policy \u0026quot;default-src 'self';\u0026quot; # 根据需要配置 -Server } # --- 速率限制 (防止暴力破解) --- @login { path /login method POST } rate_limit @login { window 10s burst 5 } # --- 自定义错误页面 --- handle_errors { rewrite * /error-pages/{http.error.status_code}.html file_server } # --- 日志记录 --- log { output file /var/log/caddy/yourdomain.com.access.log { roll_size 10mb roll_keep 5 roll_keep_for 720h } } }\n\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; 站点二: api.yourdomain.com (反向代理) \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; api.yourdomain.com { reverse_proxy localhost:8081 { lb_policy least_conn health_uri /health health_interval 10s } }\n\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; 站点三: old-domain.com (域名重定向) \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; old-domain.com, www.old-domain.com { redir https://yourdomain.com{uri} permanent }`\n如何开始使用？ 安装 Caddy: 访问 Caddy 的官方下载页面，根据您的操作系统选择最简单的方式安装。\n创建 Caddyfile: 将上面的模板保存为一个名为 Caddyfile 的纯文本文件，并根据您的需求进行修改。\n运行 Caddy（配置在/etc/Caddy)\nBash\n1 caddy run 如果您想让它在后台持续运行，可以使用：\nBash\n1 caddy start Caddy 会立即开始工作，为您的域名提供服务并自动处理 HTTPS。\nCaddy 的管理命令主要通过其命令行界面（CLI）进行操作，涵盖了从启动到停止、配置验证以及版本查看等多个方面。\nCaddy 常用管理命令概览 启动 Caddy: caddy run: 在前台运行，常用于开发和调试。 caddy start: 在后台作为守护进程启动，适用于生产环境。 caddy reload: 无需停机即可重新加载配置文件，使更改生效。 停止 Caddy: caddy stop: 停止当前运行的 Caddy 进程。 配置管理: caddy validate --config /path/to/Caddyfile: 检查配置文件的语法是否正确。 caddy adapt --config /path/to/Caddyfile --pretty: 将 Caddyfile 转换为易读的 JSON 格式配置。 信息查询: caddy version: 显示 Caddy 的版本信息。 caddy help: 获取整体帮助信息。 caddy help \u0026lt;command\u0026gt;: 获取特定命令的帮助信息。 服务管理 (Systemd): 在生产环境中，通常会结合 Systemd 等服务管理工具来控制 Caddy 服务。常用命令包括： sudo systemctl start caddy: 启动服务。 sudo systemctl stop caddy: 停止服务。 sudo systemctl restart caddy: 重启服务。 sudo systemctl reload caddy: 重新加载配置。 sudo systemctl enable caddy: 设置开机自启动。 sudo systemctl status caddy: 查看服务状态。 掌握这些命令能让你高效地管理 Caddy 服务器，无论是用于开发测试还是在生产环境中稳定运行。\n总结 Caddy 以其颠覆性的设计理念，正在改变我们对 Web 服务器的认知。它将曾经繁琐的配置工作，变成了一种简单而愉悦的体验。无论您是想托管一个个人博客，还是部署复杂的微服务架构，Caddy 都是一个值得您认真考虑的、强大而现代的选择。\n给它一个机会，我相信你会爱上它的。\n","permalink":"https://blog.l50.top/posts/techs/caddy%E7%AE%80%E7%BA%A6%E4%B8%8E%E5%BC%BA%E5%A4%A7%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88/","summary":"\u003cp\u003e你是否曾为 Nginx 或 Apache 的复杂配置而头疼？是否曾为了配置一个 SSL 证书、处理 HTTPS 跳转而耗费数小时？如果你对这些问题感同身受，那么是时候了解一下 Caddy 了——一个为现代互联网而生的 Web 服务器。\u003c/p\u003e","title":"Caddy,简约与强大的完美结合"},{"content":"如何在两台 Debian 12 服务器上，从零开始安装并配置 WireGuard，实现将一台服务器（客户端）的所有网络流量通过另一台服务器（服务端）进行代理转发。\n目标场景 VPS-B (服务端/网关)：网络线路良好，我们将用它作为流量出口。 VPS-A (客户端)：网络线路较差，我们希望它的所有流量都通过 VPS-B。 第一部分：准备工作 (在两台服务器上执行) 在 VPS-A 和 VPS-B 上都需要完成以下操作。\n1.1 更新系统 保持系统最新是一个好习惯。\nBash\n1 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y 1.2 安装 WireGuard Debian 12 的官方源中已包含 WireGuard。\nBash\n1 sudo apt install wireguard -y 第二部分：配置 VPS-B (服务端/网关) 所有操作均在线路好的 VPS-B 上进行。\n2.1 开启内核的 IP 转发 这是让服务器能够充当路由器的关键一步。\nBash\n1 2 # 编辑 sysctl 配置文件 sudo nano /etc/sysctl.conf 找到并取消下面这行的注释（删除前面的 #），如果不存在就手动添加：\nIni, TOML\n1 2 net.ipv4.ip_forward=1 net.ipv6.conf.all.forwarding=1 # 如果需要转发IPv6流量，也一并开启 保存文件后，执行以下命令使配置立即生效：\nBash\n1 sudo sysctl -p 2.2 生成密钥对 Bash\n1 2 3 4 5 # 进入wireguard配置目录 cd /etc/wireguard/ # 设置umask确保私钥文件权限安全，然后生成密钥对 umask 077; wg genkey | tee privatekey_b | wg pubkey \u0026gt; publickey_b privatekey_b 是 VPS-B 的私钥，绝不能泄露。 publickey_b 是 VPS-B 的公钥，需要发给客户端 VPS-A。 请记下这两个密钥的内容，稍后会用到。\nBash\n1 2 cat privatekey_b cat publickey_b 2.3 创建 WireGuard 配置文件 Bash\n1 sudo nano /etc/wireguard/wg0.conf 将以下内容复制进去，并替换相应的值。这是我们最终优化过的版本，包含了解决“有握手但无法上网”问题的关键防火墙规则。\nIni, TOML\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [Interface] # 服务端在WireGuard网络中的私有地址 Address = 10.10.10.1/24 # 监听的UDP端口，可以自定义，例如51820 ListenPort = 51820 # 填入刚才生成的VPS-B的私钥 (privatekey_b) PrivateKey = \u0026lt;VPS-B的私钥内容\u0026gt; # 【核心】当接口启动/关闭时，自动添加/删除防火墙规则 # 这套规则完整处理了流量转发和NAT，能应对FORWARD链为DROP的默认策略 PostUp = iptables -I FORWARD 1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT; iptables -I FORWARD 2 -i %i -j ACCEPT; iptables -t nat -I POSTROUTING 1 -s 10.10.10.0/24 -o eth0 -j MASQUERADE PostDown = iptables -D FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT; iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -s 10.10.10.0/24 -o eth0 -j MASQUERADE [Peer] # 这是对端VPS-A的信息 # 稍后在VPS-A上生成公钥后，填入此处 PublicKey = \u0026lt;VPS-A的公钥内容\u0026gt; # 分配给VPS-A的私有IP地址 AllowedIPs = 10.10.10.2/32 注意：PostUp/PostDown 中的 eth0 是公网网卡的名称，请用 ip a 命令确认，如果不是 eth0 (例如是 ens3)，请务必修改。\n2.4 配置防火墙 确保您选择的 ListenPort (例如 51820) 的 UDP 流量被允许。如果使用 ufw：\nBash\n1 2 sudo ufw allow 51820/udp sudo ufw reload 如果您使用云服务商（如 AWS, Google Cloud, Azure），请在其控制台的安全组或网络规则中放行此端口。\n第三部分：配置 VPS-A (客户端) 所有操作均在线路差的 VPS-A 上进行。\n3.1 生成密钥对 同样地，为 VPS-A 生成一套自己的密钥。\nBash\n1 2 cd /etc/wireguard/ umask 077; wg genkey | tee privatekey_a | wg pubkey \u0026gt; publickey_a 记下 publickey_a 的内容，并回到 VPS-B 的 wg0.conf 配置文件中，将其填入 [Peer] -\u0026gt; PublicKey 字段。 3.2 创建 WireGuard 配置文件 Bash\n1 sudo nano /etc/wireguard/wg0.conf 将以下内容复制进去，并替换相应的值：\nIni, TOML\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [Interface] # 客户端在WireGuard网络中的私有地址 Address = 10.10.10.2/24 # 填入刚才生成的VPS-A的私钥 (privatekey_a) PrivateKey = \u0026lt;VPS-A的私钥内容\u0026gt; # 建议设置DNS，防止DNS泄露，确保所有查询都通过隧道 DNS = 8.8.8.8, 1.1.1.1 [Peer] # 这是对端VPS-B的信息 # 填入之前在VPS-B上生成的公钥 (publickey_b) PublicKey = \u0026lt;VPS-B的公钥内容\u0026gt; # 【核心】告诉本机，所有流量都应通过此隧道发送 AllowedIPs = 0.0.0.0/0, ::/0 # VPS-B的公网IP地址和监听端口 Endpoint = \u0026lt;VPS-B的公网IP\u0026gt;:51820 # 保持心跳，有助于维持连接稳定 PersistentKeepalive = 25 第四部分：启动并验证 先在 VPS-B (服务端) 上启动：\nBash\n1 sudo wg-quick up wg0 然后在 VPS-A (客户端) 上启动：\nBash\n1 sudo wg-quick up wg0 验证连接状态 (在两台机器上都执行)：\nBash\n1 sudo wg show 检查输出，关键是要看到 latest handshake (最近一次握手) 有时间记录。\n测试隧道连通性 (在 VPS-A 上执行)：\nBash\n1 ping 10.10.10.1 应该能 ping 通服务端的隧道地址。\n最终验证 (在 VPS-A 上执行)：\nBash\n1 curl ip.info 如果一切正常，返回的 IP 地址必须是您 VPS-B 的公网 IP。\n第五部分：设置开机自启 为了让服务在服务器重启后自动运行，请在 VPS-A 和 VPS-B 两台服务器上都执行以下命令：\nBash\n1 sudo systemctl enable wg-quick@wg0 至此，您已经拥有一个稳定、高效、开机自启的 WireGuard 全局代理方案。\n","permalink":"https://blog.l50.top/posts/techs/%E4%BD%BF%E7%94%A8wireguard%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/","summary":"\u003cp\u003e如何在两台 Debian 12 服务器上，从零开始安装并配置 WireGuard，实现将一台服务器（客户端）的所有网络流量通过另一台服务器（服务端）进行代理转发。\u003c/p\u003e","title":"使用wireguard配置代理"},{"content":"管理平台安装（必要） 安装unzip\n在CentOS（5、6、7）下可以使用： 1 sudo yum -y install unzip RedHa/CentOS 8/CentOS 9/RockyLinux9/Fedora下可以使用： 1 dnf -y install unzip 在Debian/Ubuntu下可以使用： 1 sudo apt install unzip 在Freebsd下可以使用： 1 pkg install unzip 屏蔽官方域名\n1 2 3 4 5 6 7 echo \u0026#34;127.0.0.1 goedge.cloud\u0026#34; | sudo tee -a /etc/hosts \u0026gt; /dev/null echo \u0026#34;127.0.0.1 goedge.cn\u0026#34; | sudo tee -a /etc/hosts \u0026gt; /dev/null echo \u0026#34;127.0.0.1 dl.goedge.cloud\u0026#34; | sudo tee -a /etc/hosts \u0026gt; /dev/null echo \u0026#34;127.0.0.1 dl.goedge.cn\u0026#34; | sudo tee -a /etc/hosts \u0026gt; /dev/null echo \u0026#34;127.0.0.1 global.dl.goedge.cloud\u0026#34; | sudo tee -a /etc/hosts \u0026gt; /dev/null echo \u0026#34;127.0.0.1 global.dl.goedge.cn\u0026#34; | sudo tee -a /etc/hosts \u0026gt; /dev/null cat /etc/hosts 或手动修改hosts文件 1 2 3 4 5 6 7 vi /etc/hosts 127.0.0.1 goedge.cn 127.0.0.1 goedge.cloud 127.0.0.1 dl.goedge.cloud 127.0.0.1 dl.goedge.cn 127.0.0.1 global.dl.goedge.cloud 127.0.0.1 global.dl.goedge.cn 创建安装目录\n1 2 mkdir /usr/local/goedge cd /usr/local/goedge 获取程序包并解压\n国际源（Cloudflare） 1 2 3 4 5 # X86_64 wget https://static-file-global.353355.xyz/goedge/edge-admin-linux-amd64-plus-v1.3.9.zip # aarch64 wget https://static-file-global.353355.xyz/goedge/edge-admin-linux-arm64-plus-v1.3.9.zip 国内源（阿里云CDN） 1 2 3 4 5 6 # X86_64 wget https://fj.ly93.cc/37/1809553326/edge-admin-linux-amd64-plus-v1.3.9.zip # aarch64 wget https://fj.ly93.cc/37/1809551208/edge-admin-linux-arm64-plus-v1.3.9.zip unzip -o ./edge-admin-linux-amd64-plus-v1.3.9.zip 启动管理平台\n1 2 cd edge-admin/ bin/edge-admin start 如果没有意外的话，服务就正常启动了，并提示类似于以下的信息：\n1 Edge Admin started ok, pid: 109053 可以使用ps命令，来检查进程是否存在：\n1 ps ax|grep edge 可以看到类似于以下的进程信息：\n1 31643 ? Sl 0:04 bin/edge-admin 就说明管理平台启动成功；可以在 logs/run.log 中查看启动的日志，方便我们诊断问题； 默认启动的端口是 7788，确认进程已经启动的时候，可以在浏览器上通过：\n1 http://IP地址:7788/ 访问管理平台；如果你的服务器上已经设置了防火墙，需要在防火墙设置 7788 这个端口是通过的；如果能正常访问上述网址的话，系统会自动进入安装过程，按照界面提示填写各项选项即可。\n安装系统服务\n1 bin/edge-admin service 安装MySQL\n1 sudo curl -s https://static-file-global.353355.xyz/goedge/mysql/install-mysql.sh | bash 替换边缘节点包\n国际源（Cloudflare） 1 2 3 4 5 cd /usr/local/goedge/edge-admin/edge-api/deploy rm -rf *.zip wget -O edge-node-linux-amd64-v1.3.9.zip https://static-file-global.353355.xyz/goedge/edge-node-linux-amd64-plus-v1.3.9.zip wget -O edge-node-linux-arm64-v1.3.9.zip https://static-file-global.353355.xyz/goedge/edge-node-linux-arm64-plus-v1.3.9.zip 国内源（阿里云CDN） 1 2 3 4 5 cd /usr/local/goedge/edge-admin/edge-api/deploy rm -rf *.zip wget -O edge-node-linux-amd64-v1.3.9.zip https://fj.ly93.cc/37/1809540483/edge-node-linux-amd64-plus-v1.3.9.zip wget -O edge-node-linux-arm64-v1.3.9.zip https://fj.ly93.cc/37/1809540478/edge-node-linux-arm64-plus-v1.3.9.zip 开心版激活\n浏览器访问管理平台，依次点击「系统设置」，「商业版本」，「激活」，直接粘贴下方提供的旗舰版注册码即可完成离线激活，终身有效！\n1 F4BuVYEKSDWV+I13ISd5NUyBcWOlH0af4/ow9obzYBS3XvYC9IsK86k5UDyyBv9vqJWN2/FQTDbPyuAO0zxYlkLDC0c8rrShs+7PAkqM0O8wBIGknzForgidDZahky5Lo/ZWaPZ1dVFUxmV29ykb0I0b4tv7Q3OtnTylOuzf//MYrlvyw6VJQMGnsttmeHzsNL/r0yDONOEXZoGoLZsuBKnkfXt+qt6bZF+kM1ncbh+sY42BrPTWQ12sXqJS3qHlzU0FFl9lTNzLGYYhq5vi/4sJuPVE50/uLCtslTJdb9zOGR915hnM+jHYsR+jUk0QxOqtreaHpsvNuLkexXbkmA== 边缘节点安装（安装在你的CDN节点上） 浏览器访问管理平台，依次点击「边缘节点」，「创建节点」，按要求填入节点名称、节点公网IP地址、SSH端口号，添加SSH登录信息，点击「远程安装」，即可一键完成边缘节点安装部署。\n由于上面的流程已经替换过/deploy目录下的边缘节点包，故此处一键安装的边缘节点程序版本都是安全版本，无需担忧。\n安装成功后，建议参照安装管理平台时的操作，前往已安装的节点手动修改hosts屏蔽与官方域名的通信！\n用户平台安装（非必要，仅商业化运营需要） 转到安装目录\n1 cd /usr/local/goedge 获取程序包并解压\n国际源（Cloudflare） 1 2 3 4 5 # X86_64 wget https://static-file-global.353355.xyz/goedge/edge-user-linux-amd64-v1.3.9.zip # aarch64 wget https://static-file-global.353355.xyz/goedge/edge-user-linux-arm64-v1.3.9.zip 国内源（阿里云CDN） 1 2 3 4 5 6 # X86_64 wget https://fj.ly93.cc/37/1809540410/edge-user-linux-amd64-v1.3.9.zip # aarch64 wget https://fj.ly93.cc/37/1809540413/edge-user-linux-arm64-v1.3.9.zip unzip -o ./edge-user-linux-amd64-v1.3.9.zip 管理平台添加用户节点\n浏览器访问管理平台，依次点击「系统设置」，「高级设置」，「用户节点」，「添加节点」，节点名称任意填写，进程监听端口及外部访问地址端口建议保持一致，官方文档建议可填写80/443。\n创建完毕后点击「安装节点」，可以看到配置文件内容信息，复制全部内容留作下步备用。\n创建配置文件\n1 vi /usr/local/goedge/edge-user/configs/api_user.yaml 粘贴上步获取到的配置文件内容信息，保存并退出。\n启动用户平台\n1 2 cd edge-user/ bin/edge-user start 安装系统服务\n1 bin/edge-user service 如果你的用户平台并非与管理平台安装在同一台服务器，安装成功后，建议参照安装管理平台时的操作，前往已安装的节点手动修改hosts屏蔽与官方域名的通信！\n智能DNS模块安装（非必要） 转到安装目录\n1 cd /usr/local/goedge 获取程序包并解压\n国际源（Cloudflare） 1 2 3 4 5 # X86_64 wget https://static-file-global.353355.xyz/goedge/edge-dns-linux-amd64-v1.3.9.zip # aarch64 wget https://static-file-global.353355.xyz/goedge/edge-dns-linux-arm64-v1.3.9.zip 国内源（阿里云CDN） 1 2 3 4 5 6 # X86_64 wget https://fj.ly93.cc/37/1809540514/edge-dns-linux-amd64-v1.3.9.zip # aarch64 wget https://fj.ly93.cc/37/1809540511/edge-dns-linux-arm64-v1.3.9.zip unzip -o ./edge-dns-linux-amd64-v1.3.9.zip 管理平台添加DNS节点\n浏览器访问管理平台，依次点击「智能DNS」，「集群管理」（首次需要先创建一个集群，名称随意），然后点击「创建节点」，按要求填入节点名称、节点公网IP地址。\n创建完毕后点击创建好的节点名称，点击「安装节点」，可以看到配置文件内容信息，复制全部内容留作下步备用。\n创建配置文件\n1 vi /usr/local/goedge/edge-dns/configs/api_dns.yaml 粘贴上步获取到的配置文件内容信息，保存并退出。\n启动用户平台\n1 2 cd edge-dns/ bin/edge-dns start 安装系统服务\n1 bin/edge-dns service 如果你的智能DNS模块并非与管理平台安装在同一台服务器，安装成功后，建议参照安装管理平台时的操作，前往已安装的节点手动修改hosts屏蔽与官方域名的通信！\n常用指令 端口占用查询\n1 sudo netstat -tuln | grep :53 解除53端口占用\n1 2 3 4 5 6 7 sudo systemctl stop systemd-resolved sudo systemctl disable systemd-resolved sudo rm /etc/resolv.conf sudo touch /etc/resolv.conf vi /etc/resolv.conf nameserver 8.8.8.8 nameserver 8.8.4.4 官方文档 出现任何问题，可参考官方文档说明：https://goedge.cloud/docs\n","permalink":"https://blog.l50.top/posts/techs/goedge-pro/","summary":"\u003ch2 id=\"管理平台安装必要\"\u003e管理平台安装（必要）\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e安装unzip\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在CentOS（5、6、7）下可以使用：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo yum -y install unzip\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eRedHa/CentOS 8/CentOS 9/RockyLinux9/Fedora下可以使用：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ednf -y install unzip\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e在Debian/Ubuntu下可以使用：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt install unzip\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e在Freebsd下可以使用：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epkg install unzip\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e屏蔽官方域名\u003c/strong\u003e\u003c/p\u003e","title":"Goedge Plus Version"},{"content":"hugo -F --cleanDestinationDir\n在 Hugo 中，hugo -F --cleanDestinationDir 是一个常用的命令1。这个命令的含义如下：\n-F：这是 --buildFuture 的简写，它会让 Hugo 构建设置了未来日期的内容。默认情况下，Hugo 不会构建这些内容。 --cleanDestinationDir：这个参数会在 Hugo 生成静态网站之前清空输出目录（默认为 public 目录）。也就是说，执行这个命令后，输出目录中的所有文件和目录都会被删除，然后 Hugo 会在这个空目录中生成新的静态网站2。 需要注意的是，--cleanDestinationDir 参数并不会删除输出目录中的隐藏文件和隐藏目录2。这是因为这些文件和目录通常包含了一些对于网站运行必要的系统文件2。如果你希望完全清空输出目录，可能需要使用其他的方法，比如在部署脚本中使用 rimraf 命令2。\nHugo 是一个静态网站生成器，它有许多常用的命令和参数。以下是一些常用的 Hugo 命令和参数12345：\nhugo：主命令，不带任何子命令和参数时，表示生成静态网站，默认在 public 目录下生成静态网站2。 hugo new [path\\]：在 content 目录下创建一篇新内容文件。path 为完整的路径，包含文件名和扩展名，以 content 目录为根目录2。 hugo server：Hugo 提供了一个简版的 web 服务器，用于预览静态网站。默认地址是 http://localhost:1313/2。 -D 或 --buildDrafts：在生成静态网站或预览网站时，草稿内容也会被展示出来2。 --config string：指定新的配置文件，在网站骨架根目录下面有一个默认的配置文件 config.yaml|json|toml。Hugo 默认加载这个配置文件，通过 --config 配置文件路径 可以指定新的配置文件2。 -c 或 --contentDir string：Hugo 默认的存放内容文件的目录为 content 目录，-c 新的存放内容文件的目录路径 用于修改默认的存放路径。也可以用新的内容文件目录生成网站2。 --bind=\u0026quot;127.0.0.1\u0026quot;：服务监听 IP 地址45。 -p 或 --port=1313：服务监听端口45。 -w 或 --watch [=true\\]：监听站点目录，发现文件变更自动编译45。 -F 或 --buildFuture：包括将在未来发布的文章45。 ","permalink":"https://blog.l50.top/posts/techs/hugo%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/","summary":"\u003cp\u003e\u003ccode\u003ehugo -F --cleanDestinationDir\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://hugo.aiaide.com/post/hugo%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%8F%82%E6%95%B0/\"\u003e在 Hugo 中，\u003ccode\u003ehugo -F --cleanDestinationDir\u003c/code\u003e 是一个常用的命令\u003c/a\u003e\u003ca href=\"https://hugo.aiaide.com/post/hugo%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%8F%82%E6%95%B0/\"\u003e1\u003c/a\u003e。这个命令的含义如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-F\u003c/code\u003e：这是 \u003ccode\u003e--buildFuture\u003c/code\u003e 的简写，它会让 Hugo 构建设置了未来日期的内容。默认情况下，Hugo 不会构建这些内容。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://discourse.gohugo.io/t/cleandestinationdir-and-hidden-files/32716\"\u003e\u003ccode\u003e--cleanDestinationDir\u003c/code\u003e：这个参数会在 Hugo 生成静态网站之前清空输出目录（默认为 \u003ccode\u003epublic\u003c/code\u003e 目录）。也就是说，执行这个命令后，输出目录中的所有文件和目录都会被删除，然后 Hugo 会在这个空目录中生成新的静态网站\u003c/a\u003e\u003ca href=\"https://discourse.gohugo.io/t/cleandestinationdir-and-hidden-files/32716\"\u003e2\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://discourse.gohugo.io/t/cleandestinationdir-and-hidden-files/32716\"\u003e需要注意的是，\u003ccode\u003e--cleanDestinationDir\u003c/code\u003e 参数并不会删除输出目录中的隐藏文件和隐藏目录\u003c/a\u003e\u003ca href=\"https://discourse.gohugo.io/t/cleandestinationdir-and-hidden-files/32716\"\u003e2\u003c/a\u003e\u003ca href=\"https://discourse.gohugo.io/t/cleandestinationdir-and-hidden-files/32716\"\u003e。这是因为这些文件和目录通常包含了一些对于网站运行必要的系统文件\u003c/a\u003e\u003ca href=\"https://discourse.gohugo.io/t/cleandestinationdir-and-hidden-files/32716\"\u003e2\u003c/a\u003e\u003ca href=\"https://discourse.gohugo.io/t/cleandestinationdir-and-hidden-files/32716\"\u003e。如果你希望完全清空输出目录，可能需要使用其他的方法，比如在部署脚本中使用 \u003ccode\u003erimraf\u003c/code\u003e 命令\u003c/a\u003e\u003ca href=\"https://discourse.gohugo.io/t/cleandestinationdir-and-hidden-files/32716\"\u003e2\u003c/a\u003e。\u003c/p\u003e","title":"Hugo常用参数"},{"content":"要关闭所有正在运行的 Docker 容器，可以按照以下步骤进行操作：\n查看正在运行的容器：\n首先，可以使用以下命令查看当前正在运行的 Docker 容器：\n1 docker ps 这将列出所有正在运行的容器及其相关信息。\n停止所有容器：\n如果要停止所有正在运行的容器，可以使用以下命令：\n1 docker stop $(docker ps -aq) 这个命令会停止所有正在运行的容器。\n删除所有容器（可选）：\n如果需要删除所有已停止的容器，可以使用以下命令：\n1 docker rm $(docker ps -aq) 这将删除所有已停止的容器。请注意，这将永久删除这些容器。\n关闭 Docker 服务：\n最后，如果需要停止 Docker 服务本身，可以使用以下命令：\n1 sudo systemctl stop docker 这将停止 Docker 服务。\n通过执行以上步骤，你可以停止并删除所有正在运行的 Docker 容器，并关闭 Docker 服务。请确保你想要执行这些操作，并明白这将会影响正在运行的应用程序。\n要启动所有已停止的 Docker 容器，你可以按照以下步骤进行操作：\n查看所有容器：\n首先，你可以使用以下命令查看所有的 Docker 容器（包括已停止的容器）：\n1 docker ps -a 这将列出所有的容器，包括它们的状态（运行中或已停止）。\n启动所有已停止的容器：\n如果你想启动所有已停止的容器，可以使用以下命令：\n1 docker start $(docker ps -aqf \u0026#34;status=exited\u0026#34;) 这个命令会启动所有已停止的容器。\n通过执行以上步骤，你可以启动所有已停止的 Docker 容器。请确保你想要执行这些操作，并明白这将会影响容器中的应用程序。如果有任何疑问或需要进一步帮助，请随时告诉我。\n","permalink":"https://blog.l50.top/posts/techs/docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","summary":"\u003cp\u003e要关闭所有正在运行的 Docker 容器，可以按照以下步骤进行操作：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e查看正在运行的容器\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e首先，可以使用以下命令查看当前正在运行的 Docker 容器：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker ps\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这将列出所有正在运行的容器及其相关信息。\u003c/p\u003e","title":"Docker常用操作"},{"content":"要在 Debian 上自签名证书，您可以使用 OpenSSL 工具。以下是一些简单的步骤来生成自签名证书： 安装 OpenSSL： 如果您的系统上尚未安装 OpenSSL，请使用以下命令安装它：\n1 2 sudo apt-get update sudo apt-get install openssl 生成私钥： 使用以下命令生成私钥文件（例如，private.key）：\n1 openssl genpkey -algorithm RSA -out private.key 在生成私钥时，您可以选择其他算法和参数，根据您的需求进行调整。\n生成证书请求： 使用以下命令生成证书请求文件（例如，certificate.csr）：\n1 openssl req -new -key private.key -out certificate.csr 在生成证书请求时，您将被要求提供一些信息，例如组织名称、常用名称等。请根据您的需求填写这些信息。\n生成自签名证书： 使用以下命令生成自签名证书（例如，certificate.crt）：\n1 openssl x509 -req -in certificate.csr -signkey private.key -out certificate.crt 这将使用私钥对证书请求进行签名，并生成自签名证书。\n在生成自签名证书时，证书的有效期是需要指定的。如果您没有显式指定有效期，OpenSSL 默认会为证书设置一个较短的有效期，通常为一个月。 要指定自签名证书的有效期，您可以使用 OpenSSL 的 -days 参数来设置证书的有效天数。例如，要将证书的有效期设置为一年（365天），您可以使用以下命令：\n1 openssl x509 -req -in certificate.csr -signkey private.key -out certificate.crt -days 365 在上述命令中，-days 365 表示将证书的有效期设置为365天。您可以根据需要调整有效天数。\n请注意，自签名证书的有效期应根据您的需求和安全策略进行设置。较短的有效期可以增加安全性，因为它要求定期更新证书，但也会增加管理工作量。较长的有效期可以减少管理工作量，但可能会降低安全性，因为长期有效的证书可能会被滥用。\n在生成自签名证书时，请确保根据实际情况设置合适的有效期。\n","permalink":"https://blog.l50.top/posts/techs/%E6%89%8B%E5%8A%A8%E7%94%9F%E6%88%90%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/","summary":"\u003ch3 id=\"要在-debian-上自签名证书您可以使用-openssl-工具以下是一些简单的步骤来生成自签名证书\"\u003e要在 Debian 上自签名证书，您可以使用 OpenSSL 工具。以下是一些简单的步骤来生成自签名证书：\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e安装 OpenSSL：\u003c/strong\u003e 如果您的系统上尚未安装 OpenSSL，请使用以下命令安装它：\u003c/p\u003e","title":"手动生成自签证书"},{"content":"要手动配置NGINX多站点，您可以按照以下步骤进行操作： 安装NGINX：首先，确保您已经在服务器上安装了NGINX。您可以通过在终端中运行适用于您的操作系统的相应命令来安装NGINX。\n配置站点文件夹：在NGINX配置文件中，每个站点都有一个单独的配置文件。首先，创建一个文件夹来存储您的站点配置文件。通常，这个文件夹位于/etc/nginx/sites-available/目录下。您可以使用以下命令创建该文件夹：\n1 sudo mkdir /etc/nginx/sites-available/ 创建站点配置文件：在站点配置文件夹中，为每个站点创建一个单独的配置文件。您可以使用任何文本编辑器创建这些文件，并按照以下示例进行配置：\n1 2 3 4 5 6 7 8 9 server { listen 80; server_name example.com; root /var/www/example.com; location / { index index.html; } } 在上面的示例中，example.com是您的站点域名，/var/www/example.com是您的站点文件夹路径。您可以根据您的实际情况进行修改。\n创建站点链接：创建一个符号链接将站点配置文件链接到/etc/nginx/sites-enabled/目录。这样，NGINX将加载这些配置文件。您可以使用以下命令创建链接：\n1 sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/ 将example.com替换为您的站点配置文件的实际名称。\n检查配置并重新加载NGINX：使用以下命令检查NGINX配置文件的语法是否正确：\n1 sudo nginx -t 如果没有错误，重新加载NGINX以应用新的配置：\n1 sudo systemctl reload nginx 现在，您的新站点应该已经配置好了。\n重复步骤3到步骤5以配置更多的站点。每个站点都应该有一个独立的配置文件，并在/etc/nginx/sites-enabled/目录中创建一个符号链接。\n请注意，上述步骤是基于Linux系统的示例。如果您使用的是其他操作系统，请根据其特定的配置方式进行相应的更改。\n","permalink":"https://blog.l50.top/posts/techs/%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AEnginx%E5%A4%9A%E7%AB%99%E7%82%B9/","summary":"\u003cpre\u003e\u003ccode\u003e要手动配置NGINX多站点，您可以按照以下步骤进行操作：\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e安装NGINX：首先，确保您已经在服务器上安装了NGINX。您可以通过在终端中运行适用于您的操作系统的相应命令来安装NGINX。\u003c/p\u003e","title":"手动配置nginx多站点"},{"content":"一、背景 Amazon Lightsail轻量服务器，算是在众多大厂服务器中比较划算的一款，3.5美刀一个月就可以获得这样的配置：\n1 2 3 4 512 MB Memory 2 vCPUs Processing 20 GB SSD Storage 1 TB Transfer 还可以通过吃码的方式获取更优惠的价格。\n但是超出流量限额后，每GB流量0.12美金，加上Lightsail的带宽最高可达4Gpbs，如果不注意流量超出限额后继续使用就会很容易产生巨额的账单。\n所以，需要找一个方式，超过流量限额后，停止机器的使用，以免产生巨额账单。\n免责声明：我是根据MJJ提供的亚马逊官方博客链接，记录了下自己搭建并改造的过程，并不保证该方式100%可以解决问题，需要自行验证。\n二、大致思路 利用Amazon的Lambda函数计算（100W次以内免费），配合Amazon提供的官方Lightsail API，设置定时任务，每10分钟获取当前流量限额和已使用流量，进行对比，如果达到限额的95%，则关闭Lightsail实例：\n利用 Lightsail 的 API 接口：get_instance，获取账号下在当前区域里的所有 Lightsail 实例。 根据 Lightsail 实例的类型，获取每个实例每个月的网络流量配额。 根据实例的创建时间，计算出每个实例在当前这个计费周期内的流量配额。 通过 API 接口：get_instance_metric_data，获取每个实例已经使用的入站和出站流量总量。 如果流量超出当前计费周期的配额的95%，并关闭对应的 Lightsail 实例。 通过 EventBridge 以 cron job 的方式定时触发 Lambda，运行此检查逻辑。 优势是使用官方API获取流量使用情况，理论上更准确。 劣势暂时没发现，后续发现了再补充。\n三、过程 1. 创建Lambda函数 在AWS控制台进入Lambda函数页面，创建新函数：\nPython脚本：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 import json import boto3 import calendar import os from datetime import datetime, date, time,timedelta def get_current_month_first_day_zero_time(): today = date.today() first_day = today.replace(day=1) first_day_zero_time = datetime.combine(first_day, time.min) return first_day_zero_time def get_current_month_last_day_last_time(): today = date.today() last_day = today.replace(day=calendar.monthrange(today.year, today.month)[1]) last_day_last_time = datetime.combine(last_day, time(23, 59, 59)) return last_day_last_time def stop_instance(instance_name): client = boto3.client(\u0026#39;lightsail\u0026#39;) response = client.stop_instance( instanceName=instance_name, force=True ) def list_instances(instances_list): client = boto3.client(\u0026#39;lightsail\u0026#39;) paginator = client.get_paginator(\u0026#39;get_instances\u0026#39;) # Create a PageIterator from the Paginator page_iterator = paginator.paginate() for page in page_iterator: for instance in page[\u0026#39;instances\u0026#39;]: print(instance[\u0026#39;name\u0026#39;]) instances_list.append(instance[\u0026#39;name\u0026#39;]) def get_month_dto_quota(instance_name): client = boto3.client(\u0026#39;lightsail\u0026#39;) response = client.get_instance( instanceName=instance_name ) #print(\u0026#34;response : {}\u0026#34;.format(response)) dto_quota = response[\u0026#39;instance\u0026#39;][\u0026#39;networking\u0026#39;][\u0026#39;monthlyTransfer\u0026#39;][\u0026#39;gbPerMonthAllocated\u0026#39;] current_datetime = datetime.now() instance_created_datetime = response[\u0026#39;instance\u0026#39;][\u0026#39;createdAt\u0026#39;] if (instance_created_datetime.year == current_datetime.year) and (instance_created_datetime.month == current_datetime.month): month_ts = get_current_month_last_day_last_time().timestamp() - get_current_month_first_day_zero_time().timestamp() instance_valide_ts = get_current_month_last_day_last_time().timestamp() - instance_created_datetime.timestamp() dto_quota = (instance_valide_ts/month_ts) * dto_quota print(\u0026#34;created in current month, quota: {}GB\u0026#34;.format(dto_quota)) else: dto_quota = response[\u0026#39;instance\u0026#39;][\u0026#39;networking\u0026#39;][\u0026#39;monthlyTransfer\u0026#39;][\u0026#39;gbPerMonthAllocated\u0026#39;] print(\u0026#34;created in previous month, full quota: {}GB\u0026#34;.format(dto_quota)) return dto_quota def get_instance_data_usage(instance_name, data_type): client = boto3.client(\u0026#39;lightsail\u0026#39;) current_time = datetime.utcnow() start_time = get_current_month_first_day_zero_time() end_time = get_current_month_last_day_last_time() start_time_str = start_time.strftime(\u0026#39;%Y-%m-%dT%H:%M:%SZ\u0026#39;) end_time_str = end_time.strftime(\u0026#39;%Y-%m-%dT%H:%M:%SZ\u0026#39;) response = client.get_instance_metric_data( instanceName=instance_name, metricName=data_type, period= 6 * 600 * 24, unit=\u0026#39;Bytes\u0026#39;, statistics=[ \u0026#39;Sum\u0026#39; ], startTime=start_time_str, endTime=end_time_str ) data_points = response[\u0026#39;metricData\u0026#39;] total_data_usage = sum([data_point[\u0026#39;sum\u0026#39;] for data_point in data_points]) print(\u0026#34;total {} usage: {}\u0026#34;.format(data_type, total_data_usage)) return total_data_usage def push_notification(arn, msg): sns_client = boto3.client(\u0026#39;sns\u0026#39;) print(\u0026#34;sqs arn: {}\u0026#34;.format(arn)) response = sns_client.publish( TopicArn=arn, Message=msg, Subject=\u0026#39;Lightsail NetworkOut exceeded quota \u0026#39; ) def lambda_handler(event, context): instance_name= [] list_instances(instance_name) for i in instance_name: quota = get_month_dto_quota(i) * 1000 * 1000 * 1000 total = get_instance_data_usage(i, \u0026#34;NetworkOut\u0026#34;) + get_instance_data_usage(i, \u0026#34;NetworkIn\u0026#34;) msg = f\u0026#34;instance_name: {i} \\nusage: {total} Byte \\nquota: {quota} Byte \\nusage percent: {(total/quota)*100} %\u0026#34; print(msg) if (int(quota) * 0.95) \u0026lt; int(total): print(\u0026#34;(quota * 0.95) \u0026lt; total, soforce close instance: {}\u0026#34;.format(1)) stop_instance(i) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;total_data_usage from Lambda!\u0026#39;) } 2. 修改函数运行配置 在之前创建的Lambda函数页面，进入配置——常规配置——编辑：\n调大内存和超时时间：\n3. 赋予Lambda权限 在之前创建的Lambda函数页面，进入配置——权限——点击链接跳转至IAM权限管理页面：\n创建新的策略：\n选择JSON，粘贴数据，保存\nJSON数据：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;lightsail:GetInstance\u0026#34;, \u0026#34;lightsail:GetInstanceMetricData\u0026#34;, \u0026#34;lightsail:GetInstances\u0026#34;, \u0026#34;lightsail:StopInstance\u0026#34; ], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } 策略创建完成后关闭IAM权限页面，回到Lambda函数页面，测试是否成功：\n4. 创建定时任务触发Lambda函数 在Lambda函数页面点击添加触发器：\n选择EventBridge，增加定时任务，保存：\n表达式：cron(0/10 * * * ? *)\n这时就已经基本完成配置了。\nLambda函数每10分钟执行一次，符合条件就会自动关闭实例。\n5. 查看历史执行记录 在Lambda函数页面，选择监控，点击查看CloudWatch Logs跳转至日志页面。\n选择日志就可以看到日志的详细信息了：\n这样就可以查看历史的执行结果了。\n四、参考资料 使用 Lambda 监控 Amazon Lightsail 数据流量\n和原文不同的点：\n删除了通知部分，我搭建完成后，通知不能选邮件，对我就没啥用处了。 原本对比逻辑是超过限额才停机，我调整为了超过限额的95%就停机，可以自行修改脚本进行调整。 ","permalink":"https://blog.l50.top/posts/techs/lightsail%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%94%A8%E9%87%8F%E8%BE%BE95%E8%87%AA%E5%8A%A8%E5%85%B3%E6%9C%BA/","summary":"\u003ch4 id=\"一背景\"\u003e一、背景\u003c/h4\u003e\n\u003cp\u003eAmazon Lightsail轻量服务器，算是在众多大厂服务器中比较划算的一款，3.5美刀一个月就可以获得这样的配置：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-tex\" data-lang=\"tex\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e512 MB Memory\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2 vCPUs Processing\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e20 GB SSD Storage\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 TB Transfer\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e还可以通过吃码的方式获取更优惠的价格。\u003c/p\u003e","title":"Lightsail自动检测用量（达95%自动关机)"},{"content":"使用cron记得调整本地时间与预期时区，一般的国外VPS都是美国时区，你要想在中国时间运行，你得修改localtime 的时区为Asia/Shanghai\n1. 查看VPS时间，最后的+0800就是时区。 # date -R Mon, 27 Feb 2012 17:32:07 +0800\n一般来说时间有误的VPS都不在东八区，所以如果发现你的VPS时区不对，首先要做的就是校正时区 （如果VPS是xen的就需要先执行 echo 1 \u0026gt; /proc/sys/xen/independent_wallclock）\n2. 校正时区 # rm -rf /etc/localtime # ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n校正之后再date -R一次，如果时间对了那就OK了（通常情况openvz VPS只要修改时区就可以），反之继续同步时间。\n如果您想手动修改/etc/localtime文件来更改时区设置，请按照以下步骤进行操作：\n打开终端并以root用户身份登录。\n备份当前的/etc/localtime文件，以防止意外更改。可以使用以下命令进行备份：\n1 sudo cp /etc/localtime /etc/localtime.bak 确定您想要设置的时区文件的路径。在中国，通常使用/usr/share/zoneinfo/Asia/Shanghai作为时区文件。您可以根据自己所在的城市选择相应的路径。例如，如果您在北京，可以使用/usr/share/zoneinfo/Asia/Shanghai。\n使用以下命令将所选的时区文件复制到/etc/localtime：\n1 sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 完成后，您可以验证时区设置是否已更改。可以运行以下命令来检查：\n1 date 如果时区设置已正确更改，输出的时间和时区应与您所选择的城市相匹配。\n请注意，手动修改/etc/localtime文件是一种更改时区设置的方法，但并不是官方推荐的方式。使用官方提供的工具如dpkg-reconfigure来更改时区设置更为可靠和推荐。如果您之前尝试使用dpkg-reconfigure命令时未能成功更改时区，可能还有其他问题存在，建议仔细检查和排除其他可能的原因。\n","permalink":"https://blog.l50.top/posts/techs/%E4%BD%BF%E7%94%A8cron%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%BA%8B/","summary":"\u003cp\u003e使用cron记得调整本地时间与预期时区，一般的国外VPS都是美国时区，你要想在中国时间运行，你得修改localtime 的时区为Asia/Shanghai\u003c/p\u003e","title":"使用cron自动化需要注意的事"},{"content":"在 Debian 12 上安装 MariaDB 10.11 1.在终端中运行下述命令更新系统：\n1 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade 2.在终端中运行下述命令安装MariaDB 10.11：\n1 sudo apt install mariadb-server 3.完成后可以在终端输入下述命令查看版本：\n1 mariadb --version 4.在终端中运行下述命令进行安全设置：\n1 mysql_secure_installation 5.终端会相继出现如下提示，按需要选择，也可以一路选择 Y ：\n1 2 3 4 5 Set root password? [Y/n] y #这里会要求输入密码 Remove anonymous users? [Y/n] y Disallow root login remotely? [Y/n] y Remove test database and access to it? [Y/n] y Reload privilege tables now? [Y/n] y 6.完成上述选项，MariaDB 10.11 即已安装完成，而且通常情况下已经自动启动。也可以在终端运行如下命令启动：\n1 sudo systemctl start mariad 7.在终端中运行下述命令连接 MariaDB，或通过第三方工具连接：\n1 mysql -u root -p 按提示输入密码即可连接。\n","permalink":"https://blog.l50.top/posts/techs/debian12%E5%AE%89%E8%A3%85mariadb_10.11/","summary":"\u003ch1 id=\"在-debian-12-上安装-mariadb-1011\"\u003e在 Debian 12 上安装 MariaDB 10.11\u003c/h1\u003e\n\u003chr\u003e\n\u003cp\u003e1.在终端中运行下述命令更新系统：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt update \u0026amp;\u0026amp; sudo apt upgrade\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e2.在终端中运行下述命令安装MariaDB 10.11：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt install mariadb-server\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e3.完成后可以在终端输入下述命令查看版本：\u003c/p\u003e","title":"Debian12安装MariaDB_10.11"},{"content":"要在 Debian 中为您的 ens33 网络接口设置固定 IP，您需要编辑 /etc/network/interfaces 文件。以下是一个示例配置，您可以根据自己的网络环境进行修改：\n1 2 3 4 5 6 7 8 9 10 11 # The loopback network interface auto lo iface lo inet loopback # The primary network interface allow-hotplug ens33 iface ens33 inet static address 192.168.152.50 netmask 255.255.255.0 gateway 192.168.152.2 dns-nameservers 192.168.152.2 在上述配置中：\naddress 是您想要设置的静态 IP 地址。 netmask 是您的网络掩码。 gateway 是您的网关地址。 dns-nameservers 是您的 DNS 服务器地址。 编辑完 /etc/network/interfaces 文件后，您需要重启网络服务以使更改生效。您可以使用以下命令来重启网络服务：\n1 sudo /etc/init.d/networking restart 请注意，您需要具有适当的权限才能编辑 /etc/network/interfaces 文件和重启网络服务。如果您在执行这些步骤时遇到任何问题，我建议您寻求专业的技术支持。希望这个信息对您有所帮助！\n","permalink":"https://blog.l50.top/posts/techs/vmware%E6%89%8B%E5%8A%A8%E4%BF%AE%E6%94%B9%E7%89%B9%E5%AE%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%BB%98%E8%AE%A4%E5%88%86%E9%85%8D%E7%9A%84ip%E5%9C%B0%E5%9D%80/","summary":"\u003cp\u003e要在 Debian 中为您的 \u003ccode\u003eens33\u003c/code\u003e 网络接口设置固定 IP，您需要编辑 \u003ccode\u003e/etc/network/interfaces\u003c/code\u003e 文件。以下是一个示例配置，您可以根据自己的网络环境进行修改：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# The loopback network interface\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eauto lo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiface lo inet loopback\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# The primary network interface\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eallow-hotplug ens33\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eiface ens33 inet static\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    address 192.168.152.50\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    netmask 255.255.255.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    gateway 192.168.152.2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dns-nameservers 192.168.152.2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在上述配置中：\u003c/p\u003e","title":"Vmware手动修改特定虚拟机默认分配的IP地址"},{"content":"自从2016年入坑了新海诚的第一部电影，《你的名字》之后，对于新海诚的电影我是一部不落的看完了，2016年那部划时代的作品，《你的名字》实属让我印象深刻，第一遍看的时候没看明白，在后来的几年中陆陆续续看了不下三遍，最后看明白了，新海诚作为细节狂魔这件事是真的离谱。\n中间2019年的天气之子，由于一些原因没能看到首映，后面在家里补看了真·4K蓝光原盘，之后，对于2022年的新电影更是憧憬，但是由于一些原因，新海诚的电影从2022推迟到了2023，但是这并不影响我还是想去看的心，而今年，有幸邀请到了一个傻der一起去看。\n以下是无意（或许是有意的呢？）拍到的图片：\n当事人表示不让，但是我在无意间(一定是无意间拍到的)拍到了一张当事人!\n此时在等待检票ing\n终于开始了，是新海诚的新电影！\n画质还是那么惊艳\n不过全篇中男主真身出场的戏份太少了，建议改名为你的名字续作·你的椅子\n写在最后：\n蚓厄，往界，废墟，地震这些东西。按我的理解就是，经历过的，不管好的坏的事情，都会留下痕迹，这些东西都是有能量的。积攒多了，就爆发了。所以人跟着时间不停前进的同时，应该也把这些东西处理好，消化好，停止内耗。锁上门，走出去。\nすずめ直译的意思是麻雀，人类在自然灾害面前渺小如麻雀，你的名字面对灾难选择了去改变未来，天气之子面对灾难重新选择了人生，而到了铃芽是接受现实，面对灾难。缅怀逝者，带着希望好好活下去，就像铃芽对小铃芽所说的“未来并不可怕”这应该就是新海导想表达的吧，希望我们每个人都能主动去迎接明天！\n以前看诚哥的电影总觉得主角的爱情来的突然来的草率 现在才知道爱情就是突如其来不讲道理的 喜欢的人都是突然遇见的\n电影看完了，最后的独白像是在告诫我，一切都到放下的时候了，好好生活，会更好的，自己也会成为更好的人\n2022《铃芽户缔》 2019《天气之子》 2016《你的名字》 2013《言叶之庭》 2011《追逐繁星的孩子》 2007《秒速5厘米》 2004《云的彼端，约定的地方》 感谢诚哥的陪伴！\n","permalink":"https://blog.l50.top/posts/life/%E6%96%B0%E6%B5%B7%E8%AF%9A%E7%9A%84%E4%B8%89%E5%B9%B4%E4%B9%8B%E7%BA%A6-%E9%93%83%E8%8A%BD%E4%B9%8B%E6%97%85/","summary":"\u003cp\u003e自从2016年入坑了新海诚的第一部电影，《你的名字》之后，对于新海诚的电影我是一部不落的看完了，2016年那部划时代的作品，《你的名字》实属让我印象深刻，第一遍看的时候没看明白，在后来的几年中陆陆续续看了不下三遍，最后看明白了，新海诚作为细节狂魔这件事是真的离谱。\u003c/p\u003e","title":"新海诚的三年之约 铃芽之旅"},{"content":"一）ACME安装 1 curl https://get.acme.sh | sh 安装程序会自动做以下操作：\n自动把 acme.sh 安装到你的 home 的.acme.sh目录下，即~/.acme.sh/ 自动创建一个 bash 的 alias, 方便你的使用: alias acme.sh=~/.acme.sh/acme.sh 自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书. （二）更改默认证书机构 1 acme.sh --set-default-ca --server letsencrypt acme被ZeroSSL收购，其默认的证书方式为ZeroSSL，但此证书生成时会携带邮箱，因此更换为letsencrypt。\n当然，也可以在生成证书时加一个--server参数来决定生成什么证书\n1 --server letsencrypt （三）生成证书 使用acme.sh --issue命令生成证书，但生成证书的同时会进行域名的所有权的验证。 acme.sh 有两种方式验证：http 和 dns 验证。\n注意：如果需要生成泛域名（*.a.com）的证书，不能使用HTTP认证域名，需要改用DNS认证的方式\nDNS 验证方式（推荐,手动也可，但是作者不想手动.jpg） 需要在域名上添加一条 txt 解析记录, 验证域名所有权\n方式1：手动添加记录 a. 生成txt解析内容\n1 2 acme.sh --issue --dns -d mydomain.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please 以上mydomain.com只是测试域名，如果多个域名，则需多次使用-d配置，如-d www.a.com -d img.a.com\nb. 把txt解析添加到域名管理面板中\nc. 重新生成证书\n1 2 acme.sh --renew -d mydomain.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please 注意，重新生成使用的是renew参数，把生成txt解析内容命令的issue改为renew\n方式2：域名提供商api自动解析 dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.\na. 在域名提供商中，生成你的 api id 和 api key并记录\nb. 引入api id和key，以dnspod为例\n1 2 export DP_Id=\u0026#34;1234\u0026#34; export DP_Key=\u0026#34;sADDsdasdgdsf\u0026#34; 不同提供商，API参数值各不同，可参考下面的表格：自动 DNS API 集成\nc. 生成证书\n1 acme.sh --issue --dns dns_dp -d aa.com -d www.aa.com --dns的配置值也是根据域名提供商来决定，dns_dp表示dnspod。更多参数值可看下方表格\n表：自动 DNS API 集成\n服务商名称 服务商简称 所需API参数 获取API参数地址 cloudxns cx export CX_Key=\u0026quot;123456\u0026quot; export CX_Secret=\u0026quot;abcdef\u0026quot; 点击访问 dnspod.cn dp export DP_Id=\u0026quot;123456\u0026quot; export DP_Key=\u0026quot;abcdef\u0026quot; 点击访问 aliyun ali export Ali_Key=\u0026quot;123456\u0026quot; export Ali_Secret=\u0026quot;abcdef\u0026quot; 点击访问 cloudflare cf export CF_Key=\u0026quot;123456\u0026quot; export CF_Email=\u0026quot;abc@example.com\u0026quot; 点击访问 linode linode export LINODE_API_KEY=\u0026quot;123456\u0026quot; 点击访问 he he export HE_Username=\u0026quot;username\u0026quot; export HE_Password=\u0026quot;password\u0026quot; he的用户名密码 digitalocean dgon export DO_API_KEY=\u0026quot;123456\u0026quot; 点击访问 namesilo namesilo export Namesilo_Key=\u0026quot;123456\u0026quot; 点击访问 aws aws export AWS_ACCESS_KEY_ID=123456 export AWS_SECRET_ACCESS_KEY=abcdef 点击访问 namecom namecom export Namecom_Username=\u0026quot;username\u0026quot; export Namecom_Token=\u0026quot;123456\u0026quot; 点击访问 freedns freedns export FREEDNS_User=\u0026quot;username\u0026quot; export FREEDNS_Password=\u0026quot;password\u0026quot; freedns的用户名密码 godaddy gd export GD_Key=\u0026quot;123456\u0026quot; export GD_Secret=\u0026quot;abcdef\u0026quot; 点击访问 yandex yandex export PDD_Token=\u0026quot;abcdef\u0026quot; 点击访问 更多dnsapi的使用，可以查看文档\n（四）copy/安装 证书 默认生成的证书都放在安装目录下: ~/.acme.sh/，但是不要在web服务器中直接引用目录下的证书文件，也不要手动来拷贝证书文件到具体的web服务器中，手动拷贝会导致之后更新证书流程不能完全自动。\n正确方式是使用acme.sh的安装证书命令，acme.sh自动拷贝证书文件到具体目录中，拷贝命令会被记录下来，之后自动更新证书流程也会执行此拷贝步骤，从而实现更新证书流程的完全自动化。\n格式例子如下：\n1 2 3 4 5 acme.sh --install-cert -d xxx \\ --cert-file xxx \\ --key-file xxx \\ --fullchain-file xxx\\ --reloadcmd xxx 根据web服务器需要的文件按需引入对应的参数，reloadcmd定义证书更新后重启对应的web服务命令。\n以nginx为例：\n1 2 3 4 acme.sh --install-cert -d www.a.com -d img.a.com \\ --key-file /etc/nginx/cert_file/key.pem \\ --fullchain-file /etc/nginx/cert_file/fullchain.pem \\ --reloadcmd \u0026#34;service nginx force-reload\u0026#34; （五）web服务使用证书 通过上一步安装证书，已经把证书拷贝到目标的目录，接下来就是在web服务中使用证书即可。\n以nginx为例：\n1 2 3 4 5 6 7 ... server { listen 443 ssl; ssl_certificate /etc/nginx/cert_file/fullchain.pem; ssl_certificate_key /etc/nginx/cert_file/key.pem; # ... } 更新证书 目前证书在 60 天以后会自动更新，你无需任何操作，因为在acme.sh安装时，已经把相关的自动更新程序写入到crontab中，如果想要查看，可以通过以下命令：\n1 crontab -l 输出内容包含一个自动更新程序，大致内容如下：\n1 56 * * * * \u0026#34;/root/.acme.sh\u0026#34;/acme.sh --cron --home \u0026#34;/root/.acme.sh\u0026#34; \u0026gt; /dev/null 停止自动更新 1 acme.sh --remove -d example.com 或者手动在~/.acme.sh/目录下删除对应的域名目录，如~/.acme.sh/a.com。\n","permalink":"https://blog.l50.top/posts/techs/%E4%BD%BF%E7%94%A8acme.sh%E7%94%B3%E8%AF%B7%E5%B9%B6%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9Fssl%E8%AF%81%E4%B9%A6/","summary":"\u003ch2 id=\"一acme安装\"\u003e一）ACME安装\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl  https://get.acme.sh | sh\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e安装程序会自动做以下操作：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e自动把 acme.sh 安装到你的 \u003cstrong\u003ehome\u003c/strong\u003e 的\u003ccode\u003e.acme.sh\u003c/code\u003e目录下，即\u003ccode\u003e~/.acme.sh/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e自动创建一个 bash 的 alias, 方便你的使用: \u003ccode\u003ealias acme.sh=~/.acme.sh/acme.sh\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"二更改默认证书机构\"\u003e（二）更改默认证书机构\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eacme.sh --set-default-ca  --server  letsencrypt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eacme被ZeroSSL收购，其默认的证书方式为ZeroSSL，但此证书生成时会携带邮箱，因此更换为letsencrypt。\u003c/p\u003e","title":"使用acme.sh申请并自动续期SSL证书"},{"content":"RSA 算法和 ECC 加密算法的SSL证书区别对比\nRSA算法和ECC算法是目前流行的主要的两种 SSL证书公钥加密算法。\n当然还有刚刚兴起的国密SM2加密算法，但由于国密算法的 SSL证书目前仅仅两三款浏览器支持，且需要相应的服务器环境支持，所以本文不做过多介绍。\n**RSA算法：**比较常见的算法，应用较早，为普及，比 ECC算法的适用范围更广，兼容性很好，一般采用 2048 位的加密长度，但是对服务端性能消耗高。\n**ECC算法：**中文名称为椭圆加密算法，新一代算法趋势主流，一般采用 256 位加密长度，加密速度快，效率更高，对服务器资源消耗低，而且重要的是更安全，抗攻击型更强。\n","permalink":"https://blog.l50.top/posts/techs/rsa%E7%AE%97%E6%B3%95%E5%92%8Cecc%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84ssl%E8%AF%81%E4%B9%A6%E5%8C%BA%E5%88%AB%E5%AF%B9%E6%AF%94/","summary":"\u003cp\u003e\u003cstrong\u003eRSA 算法和 ECC 加密算法的SSL证书区别对比\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRSA算法和ECC算法是目前流行的主要的两种 SSL证书公钥加密算法。\u003c/p\u003e\n\u003cp\u003e当然还有刚刚兴起的国密SM2加密算法，但由于国密算法的 SSL证书目前仅仅两三款浏览器支持，且需要相应的服务器环境支持，所以本文不做过多介绍。\u003c/p\u003e","title":"RSA算法和ECC加密算法的SSL证书区别对比"},{"content":"在终端直接输入hugo server -D就可以在本地预览了，本地预览网址为 localhost:1313， 输入hugo就可以生成public文件夹，这个文件夹可以部署到云服务器或者托管到github上， 注意：输入hugo的生成方式只会往public文件夹里添加内容，但是不会删除外部已经不存在而public里面还存在的文件， 所以我一般用hugo -F \u0026ndash;cleanDestinationDir命令，表示每次生成的public都是全新的，会覆盖原来的。\n","permalink":"https://blog.l50.top/posts/techs/hugo%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/","summary":"\u003cp\u003e在终端直接输入hugo server -D就可以在本地预览了，本地预览网址为 localhost:1313， 输入hugo就可以生成public文件夹，这个文件夹可以部署到云服务器或者托管到github上， 注意：输入hugo的生成方式只会往public文件夹里添加内容，但是不会删除外部已经不存在而public里面还存在的文件， 所以我一般用hugo -F \u0026ndash;cleanDestinationDir命令，表示每次生成的public都是全新的，会覆盖原来的。\u003c/p\u003e","title":"Hugo折腾记录"},{"content":"格式化 格式化是许多开发人员在协作时，特别是在跨平台情况下，遇到的令人头疼的细小问题。 由于编辑器的不同或者Windows程序员在跨平台项目中的文件行尾加入了回车换行符， 一些细微的空格变化会不经意地进入大家合作的工作或提交的补丁中。不用怕，Git的一些配置选项会帮助你解决这些问题。\ncore.autocrlf 假如你正在Windows上写程序，又或者你正在和其他人合作，他们在Windows上编程，而你却在其他系统上，在这些情况下，你可能会遇到行尾 结束符问题。 这是因为Windows使用回车和换行两个字符来结束一行，而Mac和Linux只使用换行一个字符。 虽然这是小问题，但它会极大地扰乱跨平台协作。\n在Windows平台上，git默认的core.autocrlf是true，可以通过git config --list命令查看。\nGit可以在你提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF。用core.autocrlf来打开此项功能， 如果是在Windows系统上，把它设置成true（默认配置），这样当签出代码时，LF会被转换成CRLF：\n1 Copy$ git config --global core.autocrlf true Linux或Mac系统使用LF作为行结束符，因此你不想Git在签出文件时进行自动的转换；当一个以CRLF为行结束符的文件不小心被引入时你肯定想进行修正， 把core.autocrlf设置成input来告诉Git在提交时把CRLF转换成LF，签出时不转换：\n1 Copy$ git config --global core.autocrlf input 这样会在Windows系统上的签出文件中保留CRLF，会在Mac和Linux系统上，包括仓库中保留LF。\n如果你是Windows程序员，且正在开发仅运行在Windows上的项目，可以设置false取消此功能，把回车符记录在库中：\n1 Copy$ git config --global core.autocrlf false 关于在IDEA中的提示，如下图所示，点击FIX AND COMMIT即可。 ","permalink":"https://blog.l50.top/posts/techs/git-core.autocrlf%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/","summary":"\u003ch3 id=\"格式化\"\u003e格式化\u003c/h3\u003e\n\u003cp\u003e格式化是许多开发人员在协作时，特别是在跨平台情况下，遇到的令人头疼的细小问题。 由于编辑器的不同或者Windows程序员在跨平台项目中的文件行尾加入了回车换行符， 一些细微的空格变化会不经意地进入大家合作的工作或提交的补丁中。不用怕，Git的一些配置选项会帮助你解决这些问题。\u003c/p\u003e","title":"Git Core.autocrlf配置说明"},{"content":"当你在Windows下搭建hugo时你必须首先将git配置中的自动切换改为false，如果不调整该项，你通过Windows上传的hugo到github pages将会样式不对，即使你在本地预览的是正确的主题，你应当在操作之前使用：git config core.autocrlf false。\n至于为什么，详情见另外一文 《git core.autocrlf配置说明》\n","permalink":"https://blog.l50.top/posts/techs/hugo%E5%A4%87%E4%BB%BD%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","summary":"\u003cp\u003e当你在Windows下搭建hugo时你必须首先将git配置中的自动切换改为false，如果不调整该项，你通过Windows上传的hugo到github pages将会样式不对，即使你在本地预览的是正确的主题，你应当在操作之前使用：\u003ccode\u003egit config core.autocrlf false\u003c/code\u003e。\u003c/p\u003e","title":"Hugo备份以及遇到的问题"},{"content":"This is a testing web page.\n这是一个测试页面，还没想好要写什么。\n","permalink":"https://blog.l50.top/about/","summary":"\u003cp\u003eThis is a testing web page.\u003c/p\u003e\n\u003cp\u003e这是一个测试页面，还没想好要写什么。\u003c/p\u003e","title":"About"}]